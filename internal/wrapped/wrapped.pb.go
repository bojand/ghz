// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wrapped.proto

package wrapped

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("wrapped.proto", fileDescriptor_a9aa7f80a2b4490d) }

var fileDescriptor_a9aa7f80a2b4490d = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2f, 0x4a, 0x2c,
	0x28, 0x48, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0xe4, 0xd2,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xc2, 0x49, 0xa5, 0x69, 0xfa, 0x10, 0x89, 0xa2, 0x62,
	0x88, 0x42, 0xa3, 0x28, 0x2e, 0xbe, 0x70, 0x88, 0xd2, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54,
	0x21, 0x0f, 0x2e, 0x2e, 0xf7, 0xd4, 0x12, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x19,
	0x3d, 0x88, 0x01, 0x7a, 0x30, 0x03, 0xf4, 0x82, 0x4b, 0x8a, 0x32, 0xf3, 0xd2, 0xc3, 0x12, 0x73,
	0x4a, 0x53, 0xa5, 0xf0, 0xca, 0x3a, 0x09, 0x45, 0x09, 0x64, 0xe6, 0x95, 0xa4, 0x16, 0xe5, 0x25,
	0xe6, 0x40, 0xad, 0x4d, 0x49, 0x62, 0x03, 0xab, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfd,
	0xf7, 0x3c, 0x4d, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WrappedServiceClient is the client API for WrappedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WrappedServiceClient interface {
	GetMessage(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.StringValue, error)
}

type wrappedServiceClient struct {
	cc *grpc.ClientConn
}

func NewWrappedServiceClient(cc *grpc.ClientConn) WrappedServiceClient {
	return &wrappedServiceClient{cc}
}

func (c *wrappedServiceClient) GetMessage(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/wrapped.WrappedService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WrappedServiceServer is the server API for WrappedService service.
type WrappedServiceServer interface {
	GetMessage(context.Context, *wrappers.StringValue) (*wrappers.StringValue, error)
}

// UnimplementedWrappedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWrappedServiceServer struct {
}

func (*UnimplementedWrappedServiceServer) GetMessage(ctx context.Context, req *wrappers.StringValue) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}

func RegisterWrappedServiceServer(s *grpc.Server, srv WrappedServiceServer) {
	s.RegisterService(&_WrappedService_serviceDesc, srv)
}

func _WrappedService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrappedServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wrapped.WrappedService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrappedServiceServer).GetMessage(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _WrappedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wrapped.WrappedService",
	HandlerType: (*WrappedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _WrappedService_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wrapped.proto",
}
